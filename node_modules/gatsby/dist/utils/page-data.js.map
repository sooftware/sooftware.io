{"version":3,"sources":["../../src/utils/page-data.ts"],"names":["reverseFixedPagePath","pageDataRequestPath","readPageData","publicDir","pagePath","filePath","rawPageData","fs","readFile","JSON","parse","removePageData","existsSync","remove","Promise","resolve","pageDataExists","lmdbPageQueryResultsCache","getLMDBPageQueryResultsCache","GatsbyCacheLmdbImpl","require","default","name","encoding","init","savePageQueryResultsPromise","waitUntilPageQueryResultsAreStored","savePageQueryResult","programDir","stringifiedResult","set","pageQueryResultsPath","path","join","replace","outputFile","readPageQueryResult","get","Error","writePageData","componentChunkName","matchPath","staticQueryHashes","result","outputFilePath","body","stringify","pageDataSize","Buffer","byteLength","store","dispatch","type","payload","size","pageDataHash","isFlushPending","isFlushing","isFlushEnqueued","flush","pendingPageDataWrites","pages","program","staticQueriesByTemplate","queries","getState","pagePaths","writePageDataActivity","reporter","createProgress","start","flushQueue","cb","page","_","process","env","GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND","mode","query","trackedQueries","dirty","FLAG_DIRTY_NEW_PAGE","componentPath","directory","tick","websocketManager","emitPageData","id","push","idle","drain","end","enqueueFlush","handleStalePageData","pathExists","activity","activityTimer","pageDataFilesFromPreviousBuilds","reject","results","Set","stream","on","data","add","e","expectedPageDataFiles","forEach","deletionPromises","pageDataFilePath","has","all"],"mappings":"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","sourcesContent":["import { walkStream as fsWalkStream, Entry } from \"@nodelib/fs.walk\"\nimport fs from \"fs-extra\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport fastq from \"fastq\"\nimport path from \"path\"\nimport { createContentDigest, generatePageDataPath } from \"gatsby-core-utils\"\nimport { IGatsbyPage } from \"../redux/types\"\nimport { websocketManager } from \"./websocket-manager\"\nimport { isWebpackStatusPending } from \"./webpack-status\"\nimport { store } from \"../redux\"\nimport { hasFlag, FLAG_DIRTY_NEW_PAGE } from \"../redux/reducers/queries\"\nimport { isLmdbStore } from \"../datastore\"\nimport type GatsbyCacheLmdb from \"./cache-lmdb\"\n\nimport { IExecutionResult } from \"../query/types\"\n\ninterface IPageData {\n  componentChunkName: IGatsbyPage[\"componentChunkName\"]\n  matchPath?: IGatsbyPage[\"matchPath\"]\n  path: IGatsbyPage[\"path\"]\n  staticQueryHashes: Array<string>\n}\n\nexport interface IPageDataWithQueryResult extends IPageData {\n  result: IExecutionResult\n}\n\nexport function reverseFixedPagePath(pageDataRequestPath: string): string {\n  return pageDataRequestPath === `index` ? `/` : pageDataRequestPath\n}\n\nexport async function readPageData(\n  publicDir: string,\n  pagePath: string\n): Promise<IPageDataWithQueryResult> {\n  const filePath = generatePageDataPath(publicDir, pagePath)\n  const rawPageData = await fs.readFile(filePath, `utf-8`)\n\n  return JSON.parse(rawPageData)\n}\n\nexport async function removePageData(\n  publicDir: string,\n  pagePath: string\n): Promise<void> {\n  const filePath = generatePageDataPath(publicDir, pagePath)\n\n  if (fs.existsSync(filePath)) {\n    return await fs.remove(filePath)\n  }\n\n  return Promise.resolve()\n}\n\nexport function pageDataExists(publicDir: string, pagePath: string): boolean {\n  return fs.existsSync(generatePageDataPath(publicDir, pagePath))\n}\n\nlet lmdbPageQueryResultsCache: GatsbyCacheLmdb\nfunction getLMDBPageQueryResultsCache(): GatsbyCacheLmdb {\n  if (!lmdbPageQueryResultsCache) {\n    const GatsbyCacheLmdbImpl = require(`./cache-lmdb`).default\n    lmdbPageQueryResultsCache = new GatsbyCacheLmdbImpl({\n      name: `internal-tmp-query-results`,\n      encoding: `string`,\n    }).init()\n  }\n  return lmdbPageQueryResultsCache\n}\n\nlet savePageQueryResultsPromise = Promise.resolve()\n\nexport function waitUntilPageQueryResultsAreStored(): Promise<void> {\n  return savePageQueryResultsPromise\n}\n\nexport async function savePageQueryResult(\n  programDir: string,\n  pagePath: string,\n  stringifiedResult: string\n): Promise<void> {\n  if (isLmdbStore()) {\n    savePageQueryResultsPromise = getLMDBPageQueryResultsCache().set(\n      pagePath,\n      stringifiedResult\n    ) as Promise<void>\n  } else {\n    const pageQueryResultsPath = path.join(\n      programDir,\n      `.cache`,\n      `json`,\n      `${pagePath.replace(/\\//g, `_`)}.json`\n    )\n    await fs.outputFile(pageQueryResultsPath, stringifiedResult)\n  }\n}\n\nexport async function readPageQueryResult(\n  publicDir: string,\n  pagePath: string\n): Promise<any> {\n  if (isLmdbStore()) {\n    const stringifiedResult = await getLMDBPageQueryResultsCache().get(pagePath)\n    if (typeof stringifiedResult === `string`) {\n      return stringifiedResult\n    }\n    throw new Error(`Couldn't find temp query result for \"${pagePath}\".`)\n  } else {\n    const pageQueryResultsPath = path.join(\n      publicDir,\n      `..`,\n      `.cache`,\n      `json`,\n      `${pagePath.replace(/\\//g, `_`)}.json`\n    )\n    return fs.readFile(pageQueryResultsPath)\n  }\n}\n\nexport async function writePageData(\n  publicDir: string,\n  {\n    componentChunkName,\n    matchPath,\n    path: pagePath,\n    staticQueryHashes,\n  }: IPageData\n): Promise<string> {\n  const result = await readPageQueryResult(publicDir, pagePath)\n\n  const outputFilePath = generatePageDataPath(publicDir, pagePath)\n  let body = `{\n    \"componentChunkName\": \"${componentChunkName}\",\n    \"path\": \"${pagePath}\",\n    \"result\": ${result},\n    \"staticQueryHashes\": ${JSON.stringify(staticQueryHashes)}`\n\n  if (matchPath) {\n    body += `,\n    \"matchPath\": \"${matchPath}\"`\n  }\n\n  body += `}`\n\n  // transform asset size to kB (from bytes) to fit 64 bit to numbers\n  const pageDataSize = Buffer.byteLength(body) / 1000\n\n  store.dispatch({\n    type: `ADD_PAGE_DATA_STATS`,\n    payload: {\n      pagePath,\n      filePath: outputFilePath,\n      size: pageDataSize,\n      pageDataHash: createContentDigest(body),\n    },\n  })\n\n  await fs.outputFile(outputFilePath, body)\n  return body\n}\n\nlet isFlushPending = false\nlet isFlushing = false\n\nexport function isFlushEnqueued(): boolean {\n  return isFlushPending\n}\n\nexport async function flush(): Promise<void> {\n  if (isFlushing) {\n    // We're already in the middle of a flush\n    return\n  }\n  await waitUntilPageQueryResultsAreStored()\n  isFlushPending = false\n  isFlushing = true\n  const {\n    pendingPageDataWrites,\n    pages,\n    program,\n    staticQueriesByTemplate,\n    queries,\n  } = store.getState()\n\n  const { pagePaths } = pendingPageDataWrites\n\n  const writePageDataActivity = reporter.createProgress(\n    `Writing page-data.json files to public directory`,\n    pagePaths.size,\n    0\n  )\n  writePageDataActivity.start()\n\n  const flushQueue = fastq(async (pagePath, cb) => {\n    const page = pages.get(pagePath)\n\n    // It's a gloomy day in Bombay, let me tell you a short story...\n    // Once upon a time, writing page-data.json files were atomic\n    // After this change (#24808), they are not and this means that\n    // between adding a pending write for a page and actually flushing\n    // them, a page might not exist anymore щ（ﾟДﾟщ）\n    // This is why we need this check\n    if (page) {\n      if (\n        (program?._?.[0] === `develop` &&\n          process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND) ||\n        (_CFLAGS_.GATSBY_MAJOR === `4` ? page.mode !== `SSG` : false)\n      ) {\n        // check if already did run query for this page\n        // with query-on-demand we might have pending page-data write due to\n        // changes in static queries assigned to page template, but we might not\n        // have query result for it\n        const query = queries.trackedQueries.get(page.path)\n        if (!query) {\n          // this should not happen ever\n          throw new Error(\n            `We have a page, but we don't have registered query for it (???)`\n          )\n        }\n\n        if (hasFlag(query.dirty, FLAG_DIRTY_NEW_PAGE)) {\n          // query results are not written yet\n          return cb(null, true)\n        }\n      }\n\n      const staticQueryHashes =\n        staticQueriesByTemplate.get(page.componentPath) || []\n\n      const result = await writePageData(\n        path.join(program.directory, `public`),\n        {\n          ...page,\n          staticQueryHashes,\n        }\n      )\n\n      writePageDataActivity.tick()\n\n      if (program?._?.[0] === `develop`) {\n        websocketManager.emitPageData({\n          id: pagePath,\n          result: JSON.parse(result) as IPageDataWithQueryResult,\n        })\n      }\n    }\n\n    store.dispatch({\n      type: `CLEAR_PENDING_PAGE_DATA_WRITE`,\n      payload: {\n        page: pagePath,\n      },\n    })\n\n    return cb(null, true)\n  }, 25)\n\n  for (const pagePath of pagePaths) {\n    flushQueue.push(pagePath, () => {})\n  }\n\n  if (!flushQueue.idle()) {\n    await new Promise(resolve => {\n      flushQueue.drain = resolve as () => unknown\n    })\n  }\n\n  writePageDataActivity.end()\n\n  isFlushing = false\n\n  return\n}\n\nexport function enqueueFlush(): void {\n  if (isWebpackStatusPending()) {\n    isFlushPending = true\n  } else {\n    flush()\n  }\n}\n\nexport async function handleStalePageData(): Promise<void> {\n  if (!(await fs.pathExists(`public/page-data`))) {\n    return\n  }\n\n  // public directory might have stale page-data files from previous builds\n  // we get the list of those and compare against expected page-data files\n  // and remove ones that shouldn't be there anymore\n\n  const activity = reporter.activityTimer(`Cleaning up stale page-data`)\n  activity.start()\n\n  const pageDataFilesFromPreviousBuilds = await new Promise<Set<string>>(\n    (resolve, reject) => {\n      const results = new Set<string>()\n\n      const stream = fsWalkStream(`public/page-data`)\n\n      stream.on(`data`, (data: Entry) => {\n        if (data.name === `page-data.json`) {\n          results.add(data.path)\n        }\n      })\n\n      stream.on(`error`, e => {\n        reject(e)\n      })\n\n      stream.on(`end`, () => resolve(results))\n    }\n  )\n\n  const expectedPageDataFiles = new Set<string>()\n  store.getState().pages.forEach(page => {\n    expectedPageDataFiles.add(generatePageDataPath(`public`, page.path))\n  })\n\n  const deletionPromises: Array<Promise<void>> = []\n  pageDataFilesFromPreviousBuilds.forEach(pageDataFilePath => {\n    if (!expectedPageDataFiles.has(pageDataFilePath)) {\n      deletionPromises.push(fs.remove(pageDataFilePath))\n    }\n  })\n\n  await Promise.all(deletionPromises)\n\n  activity.end()\n}\n"],"file":"page-data.js"}